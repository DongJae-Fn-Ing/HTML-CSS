.tagSelector h1{color: #0c0; font-size: 20px;}
.tagSelector p{color:#0cf; font-size:15px;}
.tagSelector span{color:#336; font-size:13px;}
/*태그선택자 사용법*/
.idselector p#paragraph1{font-size: 16px; text-decoration: underline;}
.idSelector p#paragraph2{color:#09F; text-decoration:line-through;}
.idSelector p#paragraph3{font-weight:bold; text-decoration:overline;}
/*ID선택자 사용법*/
.classSelector p.f_size{font-size: 20px;}
.classSelector p.f_weight{font-weight:bold;}
.classSelector p.f_color{color:#9cf;}
/*CLASS 선택자 사용법 + 다중 클래스 지정 */
.attrSelector fieldset{
    border: 1px solid #555; background-color: #9cf;
}
.attrSelector fieldset legend{
    border: 1px solid #555; background-color: #9cf;
}
.attrSelector ul {
    margin: 0; padding: 0; list-style: none;
}
.attrSelector ul li{
    color: #444; font-size: 14px; line-height: 30px;
}
.attrSelector ul li input,
.attrSelector ul li label{
    vertical-align: middle;
}
.attrSelector ul li label{
    width: 110px; display: inline-block;
}
.attrSelector ul li input[type='text']{
    background-color: #966; border: 1px solid #c00;
    color: white;
}
.attrSelector ul li input[type='password']{
    background-color: #fc0; border: 1px dotted #ff0;
    color: black; 
}
.attrSelector ul li input[type='radio']{
    background-color: #336; background-color: yellow;
    width: 25px; height: 25px;
}
/*같은 태그라도 attr에 따라 선택 할 수 있다.*/
/*레디오랑 비슷한 등등 이런애들은 한마디로 포맷을 가지고 있는 애들은
css의 제한이 있다*/
/* 타입 텍스트 for lable등등 [for='Pro']
어트리븃 attr 개네들로 따로 선택을 잡아 낼 수 있다는게 중요 */
.directSelector > h1{
    font-size: 28px; color: #66f;
}
/*.directSelector의 h1만
.directSelector 안의.indirect h1은 영향을 받 못한다
직계가 아니라 */

.directSelector > span{
    font-size: 22px; color: #906;
}

/* .directSelector span 안의 span은 영향을 받는다 파고든다
왜 그러나 테그가 동일하면 계속 적용된다 ==  버블 임팩트라 칭한다 나쁜 건 아니다
의도치 않게 나오는 건 문제
직계라인을 사용할 때는 주의해라  */
.stringSelector img[src$=png]{
    width: 100px; height: 100px; border: 3px solid red;
}
.stringSelector img[src$=jpg]{
    width: 200px; height: 200px; border: 5px solid green;
}
.stringSelector img[src$=gif]{
    width: 300px; height: 300px; border: 7px solid blue; 
}
/*이런식으로 확장자를 통해
attrselcetor 다른게 없다
위에서는 타입
아래는 src로 지정
이미지는 경로와 확장자를 필요
해당단어로 끝나는 대상을 사용하기 위해
딸라?
내가 직접 경우의 수를 만들어봐야 한다
속성값 일치 선택자라고 한다*/
.sameSelector h1~h2{
    background-color: #333;
}
/* ~ a(h1)를 기점으로 b(h2) 모두를 직칭한다
a를 제외하고 안에 h3를 들어가든 뭐든 h2만
범위적으로 */
.sameSelector h1 + h2{
    font-size: 40px; color: #fcf;
}
/*
    동위 선택자에서 A+B는 A 바로뒤에 위치하는 B를 지목하고,
    A~B는 A뒤에있는 B모두를 선택한다.
*/
/*+ 바로 뒤를 지칭한다
a(h1)을 기준으로
*/
/* 
위에 것을 동위 선택자
한줄 같은 라인에 있는 것만  가능한다 */

.activeSelector h1:hover{
    font-size: 35px; color: forestgreen; cursor: pointer;
}
/*마우스 커서를 접촉하면 색이 연두색으로 변하고 
커서 포인터를 통해 텍스트 형삭에서 클릭형식으로 마우스가
변한다
*/
/*포커스는 탭키로마우스로
위처럼 쓰면 태그한테 설정가능*/
/*원래는 a한테만 써야 하지만 사용하면 마우스 커서가 텍스트 상태로
변하는 부작용이 있다 이렇게 임의로 쓰면 커서 포인터를 같이 써야 한다
cursor: pointer;*/
.statusSelector input[type='checkbox'] + label{
    height: 25px; display: inline-block; vertical-align: middle;
    overflow: hidden; transition-duration: 0.75s;
}
.statusSelector input[type='checkbox']:checked + label{
    height: 0px;
}
.statusSelector input[type='text']:enabled{
    background-color: black; color: white;
}
.statusSelector input[type='text']:disabled{
    background-color: deeppink; color: black;
}
/* input 상태에 따라 대상을 작동 시킬 수 있다.
1. checkbox의 상태가 checked 일 경우 바로 뒤에 label을 height:0px로 만든다.
(상태옵션은 :checked 체크된 input 상태 , :focus 초점이 맞춰진 input 상태 , 
:enabled 사용가능한 input 상태, :disabled 사용 불가능한 input 상태)
2. label의 기본설정을 잡는다. 이 부분에서 height의 값이 있어야만 에니메이션이
일어난다.
또한 display옵션을 block 계열로 잡아야하며, overflow의 값은 hidden으로 설정
해둔다.(사라지는값)
*/
.nomalSelector ul{
    list-style: none; overflow: hidden;
}
 /*좋은 방법이 아닌다 확실하게 떨어지지 않는 구조에서만 써라
걍 에캔 써*/
.nomalSelector ul li{
    margin: 0; padding: 20px; float: left;   
}
.nomalSelector ul li:first-child{
    border-radius: 10px 0 0 10px;
}
/* 첫번째 li만 지칭하는 값
좌상단 좌하단만 깍인다. */
/* li의 첫번쨰를 지칭 
세컨 차이들는 불가  수열법칙으로 이등
웃긴건 last는 마지막 지징
중간거 :nth-child(2),nth-child(3) 식으로 지칭*/
.nomalSelector ul li:last-child{
    border-radius: 0 10px 10px 0;
}
/*마지막 li만 지칭하는 값
우상단 우하단만 깍인다.*/
.nomalSelector ul li:nth-child(1){
    background-color: #444; color: white;
}
.nomalSelector ul li:nth-child(3){
    background-color: red; color: white;
}

/*특정 숫자에만 적용하는 css*/
/* 참고 */
/* .normalSelector table{
	width:100%;
	border-width:3px 1px 2px 1px;
	border-style:solid;
	border-color:#3CF;
}
.normalSelector table caption{color:#666; font-size:12px; line-height:40px;}
.normalSelector table tr th,.normalSelector table tr td{
	width:14.28%;
	border-right:1px solid #3cf;
	border-bottom:1px solid #3cf;
	padding:10px 0;
}
.normalSelector table tr th{background-color:#6CF; }
.normalSelector table tr td{text-align:center;} */

/* 
    * http://nthmaster.com
*/

.nomalSelector2 ul{
    list-style: none; overflow: hidden;
}
.nomalSelector2 ul li{
    margin: 0; padding: 25px; float: left;
}
.nomalSelector2 ul li:nth-child(2n){
    background-color: #09f; color: white;
}
/*짝수에만 적용하는 css 생각을 해야할 점
n의 값에 2를 곱해서 순환하여 값을 낸다고 생각을 해라*/
/* 짝수를 지칭  nth-child(even)
수열을 통해 곱한다 신텍스 개념 n에 0
신텍스가 안나오면 수얄로 불가 자바스크립트롤 한다*/
.nomalSelector2 ul li:nth-child(2n+1){
    background-color: #444; color: white;
}
/*2n의 값을 다 계산을 하면서 순환한 후 그 값에
1씩을 더해줘 홀수의 값을 칭한다*/

.nomalSelector3 ul{
    list-style: none; text-overflow: hidden;
}
.nomalSelector3 ul li {
    margin: 0; padding: 10px; float: left;
}
.nomalSelector3 ul li:nth-child(odd){
    background-color: royalblue; color: white;
}
/*홀수 지칭법*/
.nomalSelector3 ul li:nth-child(even){
    background-color: violet; color: #c00;
}
/* 짝수 지칭법 */
/*nth-child 에서 (odd) 값은 홀수를 ,
 (even)은 짝수를 지정 할 수 있다. js는 반대 (0부터인식)*/

.shapeSelector > *:nth-of-type(1){
    color: red;
}
/* 제일 먼저나온 순서대로 나온 태그들은 퍼스트로 인식하여
위 방식으로 지칭을 해주면 빨간색으로 변환 */
/* 퍼스트들을 지칭 
개편함  여기서 > 직계가 빠지면 다 선택이 되는데
> 직계를 넣어주면 안쪽으로 들어가지 않는다
예를 들어 h1 안의 span이든 p든 나발이든 적용*/
.shapeSelector > *:nth-of-type(2){
    color: #30f;
}
/* 두번째로 나온 순서대로 파란색으로 전환 */
.shapeSelector > *:nth-of-type(3){
    color:green;
}
/* 세번째로 나온 순서대로 연두색으로 전환 */

.textSelector h1::first-letter{
    font-size: 100px; color: #09f;
}
/* 첫 글자만 크고 색 바꾸기 */
/* ::이 두개 찍혔다 
공간과 관련된 것은 ::
근데 콜론: 하나를 찍어도 작성함
걍 콜론 : 하나찍어서만 써라 */
.textSelector p::first-line{
    color: #090; line-height: 30px; font-size: 14px;
    text-decoration: underline;
}
/* 첫줄의 속성만 바꾼다 */

.backandfrontSelector p{
    counter-increment:rint;
}
.backandfrontSelector p:before{
    content: counter(rint) ".";
}
/*이렇게 지칭을 해주면 나중에 갯수를 지칭해준다 코드 앞에*/
/*content 개념 공부*/
.backandfrontSelector p:after{
    content: "-" attr(data-page) "page";
    font-weight: bold; color: deeppink;
}
/*비포와 에프터는 클릭 드래그 불가 데이터도 안들어 있고
보안성이 좋다 크롤링은 태그 자체를 못 건들임 */


/* 홀수를 지칭  홀수를 지칭nth-child(odd)로도 가능
 2n을 한바퀴 순환하고 그 값에 1씩 더해준다*/
/* 2n을 짝수로 받아들이지 말고 짝수는 2의 배수와 같다라는 개념으로 받아들여라 */
/*나머지 개발 수에는 0이 기본수 1부터 시작이 아니다  0부터 시작
자바 기억해라 그래서 odd랑 even 반대로 
기억해*/
/*무조건 기억을 해라 중요하다 위에서 li를 지워줘도 작동
 child는 부모 기준으로 바라본다. 그래서 앞에 지징되는 개념이 필요없다
 위에 부모를 봐라보고 있다 */


/*
전후 문자선택자
::before : 선택된 태그의 앞 공간을 선택한다.
::after : 선택된 태그의 뒷 공간을 선택한다.
counter-increment:rint -> rint(인수에  가까운 정수 반환) 라는 카운터 이름을 만들어 낸다.
content:counter(rint) -> 카운터가 태그의 갯수 만큼 하나씩 올라가며 출력 되게 한다.
"-" => - 를 출력해라 / attr(data-page) => data-page로 설정 되어있는 부분을 출력하라.
/ "page" => page를 출력하라.
ul , ol 등의 리스트 형식에서 count를 사용 할 때는 counter-reset을 하고 사용 하는 것을
권장
ex > counter-reset: 카운터이름 0;
.backandfrontSelector ul li{counter-increment:rint;} -> 카운터이름을 선언
.backandfrontSelector ul li{counter-reset:rint 0;} -> 카운터 초기화
.backandfrontSelector p::before{content:counter(rint) ".";} -> 카운터 시작
.backandfrontSelector p::after{content:"-" attr(data-page) "page"; font-weight:bold; color:deeppink;} -> 출력
data- 라는 것은 사용자 지정 속성으로 웹 표준에서 인정 해주는 개인 자율에 의한
속성 지정법이다.
대부분의 솔루션, 템플릿, jquery등에서 널리 이용 되고 있으니, 반드시 알아 둘 것.
ex> data-roll="listview" 라고 선언 하면 jquery mobile ui 템플릿에서 기본으로 공급하는
모바일에서의 리스트 출력 작동법 및 스타일 이 된다.
*/

.reactionSelector > *{
    color: #fff;
}
/* 클릭 드래그를 해야 보이는 상황 */
/* 특정 색상을 못 보는 사람들을 위해
#fff로 색상을 어느 부라우저든 통일을 했다 */
.reactionSelector > *::selection{
    background-color: #000; color: #ff0;
}
/* 드래그시 색상 입히기 */
/* 왜만하면 쓰지마라 
디자이너가 해달라고 쪼르면 해줘라 */
.notSelector input:not([type='password']){
    background-color: red;
}
/* not은 무조건 먼저 들어간다. */
/* 제외 선택자 빼고 나머지다 */
/* 클래스를 넣어줘도 되고 태그명을 넣어줘도 상관이 없다
예 *>:not(p) 이런식으로 */
/* not은 부정선택자로 지정한 대상을 제외한 나머지에게
해당 css를 적용시킨다 */

.sameAttrSelector input[class ~= "button"]{
    background-color: red; color: white;
}
/* ? ~= : 띄어쓰기 기준. 해당 단어 포함. */
.sameAttrSelector h1[title *= "제목"]{
    color: red;
}
/* ? *= : 해당 단어가 들어가는 모든 대상 선택. (전,후 상관없음.) */
.sameAttrSelector h2[title ^="남자"]{
    color: blue;
}
/* ? ^= : 해당 단어로 시작하는 것만 선택. */
.sameAttrSelector h2[title $="여자"]{
    color: pink;
}
/* ? $= : 해당 단어로 끝나는 대상 선택. */
/* ? |= : 해당 단어로 시작하거나 -으로 구분되는 대상 선택. */
